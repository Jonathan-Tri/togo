// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/manabie-com/togo/internal/storages/postgres (interfaces: Querier)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	storages "github.com/manabie-com/togo/internal/storages"
	postgres "github.com/manabie-com/togo/internal/storages/postgres"
)

// MockQuerier is a mock of Querier interface.
type MockQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockQuerierMockRecorder
}

// MockQuerierMockRecorder is the mock recorder for MockQuerier.
type MockQuerierMockRecorder struct {
	mock *MockQuerier
}

// NewMockQuerier creates a new mock instance.
func NewMockQuerier(ctrl *gomock.Controller) *MockQuerier {
	mock := &MockQuerier{ctrl: ctrl}
	mock.recorder = &MockQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuerier) EXPECT() *MockQuerierMockRecorder {
	return m.recorder
}

// AddTask mocks base method.
func (m *MockQuerier) AddTask(arg0 context.Context, arg1 *storages.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTask", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTask indicates an expected call of AddTask.
func (mr *MockQuerierMockRecorder) AddTask(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTask", reflect.TypeOf((*MockQuerier)(nil).AddTask), arg0, arg1)
}

// CountTaskPerDay mocks base method.
func (m *MockQuerier) CountTaskPerDay(arg0 context.Context, arg1 postgres.CountTaskPerDayParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountTaskPerDay", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountTaskPerDay indicates an expected call of CountTaskPerDay.
func (mr *MockQuerierMockRecorder) CountTaskPerDay(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountTaskPerDay", reflect.TypeOf((*MockQuerier)(nil).CountTaskPerDay), arg0, arg1)
}

// RetrieveTasks mocks base method.
func (m *MockQuerier) RetrieveTasks(arg0 context.Context, arg1 postgres.RetrieveTasksParams) ([]storages.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveTasks", arg0, arg1)
	ret0, _ := ret[0].([]storages.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveTasks indicates an expected call of RetrieveTasks.
func (mr *MockQuerierMockRecorder) RetrieveTasks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveTasks", reflect.TypeOf((*MockQuerier)(nil).RetrieveTasks), arg0, arg1)
}

// ValidateUser mocks base method.
func (m *MockQuerier) ValidateUser(arg0 context.Context, arg1 postgres.ValidateUserParams) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateUser", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ValidateUser indicates an expected call of ValidateUser.
func (mr *MockQuerierMockRecorder) ValidateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateUser", reflect.TypeOf((*MockQuerier)(nil).ValidateUser), arg0, arg1)
}
